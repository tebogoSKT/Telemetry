"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var globalvars_service_1 = require("../../app/services/globalvars.service");
var authentication_service_1 = require("../../app/services/authentication.service");
var login_1 = require("../classes/login");
var user_1 = require("../classes/user");
var forms_1 = require("@angular/forms");
var LoginComponent = (function () {
    function LoginComponent(zone, router, globalservice, authenticationservice) {
        this.zone = zone;
        this.router = router;
        this.globalservice = globalservice;
        this.authenticationservice = authenticationservice;
        this.model = {};
        this.loading = false;
        this.error = '';
        this.form = new forms_1.FormGroup({
            username: new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.minLength(3)]),
            password: new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.minLength(8)])
        });
        this.handleError = function (err) {
            this.loading = false;
            if (err.status) {
                this.error = err.status + ': ' + err.statusText;
            }
            else {
                this.error = err.message;
            }
            localStorage.setItem('token', '');
            this.globalservice.authenticated(false);
        };
    }
    Object.defineProperty(LoginComponent.prototype, "username", {
        get: function () { return this.form.get('username'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoginComponent.prototype, "password", {
        get: function () { return this.form.get('password'); },
        enumerable: true,
        configurable: true
    });
    LoginComponent.prototype.ngOnInit = function () {
        // reset login status
        this.user = new user_1.User;
        this.credentials = new login_1.LogIn;
        this.credentials.app = "nucleolis";
        this.authenticationservice.logout();
        this.loading = false;
        this.error = '';
    };
    LoginComponent.prototype.login = function () {
        var _this = this;
        this.loading = true;
        var authOperation;
        this.authenticationservice.login(this.credentials).subscribe(function (data) {
            if (data) {
                _this.user = data;
                _this.globalservice.UserData = data;
                localStorage.setItem('token', data.access_token);
                _this.globalservice.isAuthenticated = true;
                _this.router.navigate(['home']);
            }
            else {
                _this.newFunction();
                _this.loading = false;
                localStorage.setItem('token', '');
                _this.globalservice.isAuthenticated = false;
            }
        }, function (err) {
            _this.handleError(err);
        });
    };
    LoginComponent.prototype.logout = function () {
        this.authenticationservice.logout();
        localStorage.setItem('token', '');
        this.router.navigate(['login']);
    };
    LoginComponent.prototype.newFunction = function () {
        this.error = 'Invalid username or password!!';
    };
    return LoginComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], LoginComponent.prototype, "loading", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], LoginComponent.prototype, "error", void 0);
LoginComponent = __decorate([
    core_1.Component({
        selector: 'app-login',
        templateUrl: './login.component.html',
        styleUrls: ['./login.component.css']
    }),
    __metadata("design:paramtypes", [core_1.NgZone, router_1.Router, globalvars_service_1.GlobalVarsService, authentication_service_1.AuthenticationService])
], LoginComponent);
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=login.component.js.map