"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
require("rxjs/add/observable/throw");
require("rxjs/add/operator/catch");
require("rxjs/add/operator/map");
var user_1 = require("../classes/user");
var globalvars_service_1 = require("../../app/services/globalvars.service");
var angular_2_local_storage_1 = require("angular-2-local-storage");
var http_1 = require("@angular/common/http");
var AuthenticationService = (function () {
    function AuthenticationService(http, globalservice, localstorage) {
        this.http = http;
        this.globalservice = globalservice;
        this.localstorage = localstorage;
        this.user = new user_1.User;
        this.AuthURI = '/api/authenticate';
        var localStorage = localstorage;
    }
    AuthenticationService.prototype.login = function (logindata) {
        return this.http.post(this.AuthURI, logindata)
            .catch(function (error) { return Observable_1.Observable.throw(error || 'Server error'); });
    };
    AuthenticationService.prototype.logout = function () {
        localStorage.setItem('token', '');
        this.globalservice.UserData = new user_1.User();
        this.globalservice.isAuthenticated = false;
    };
    AuthenticationService.prototype.authData = function (res) {
        var body = res.json();
        return body || {};
    };
    AuthenticationService.prototype.handleError = function (error) {
        return Observable_1.Observable.throw(error); // Promise.reject(new Error(error._body));
    };
    AuthenticationService.prototype.isAuthenticated = function () {
        return (localStorage.getItem('token') !== null &&
            localStorage.getItem('token') !== undefined &&
            localStorage.getItem('token') !== '') ? true : false;
    };
    return AuthenticationService;
}());
AuthenticationService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.HttpClient, globalvars_service_1.GlobalVarsService, angular_2_local_storage_1.LocalStorageService])
], AuthenticationService);
exports.AuthenticationService = AuthenticationService;
//# sourceMappingURL=authentication.service.js.map